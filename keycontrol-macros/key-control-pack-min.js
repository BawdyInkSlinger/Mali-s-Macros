/* KeyControl API, format-agnostic, only requires jQuery */

window.KeyControl=class{constructor(t,e){if("string"!=typeof t)throw new Error("Keybinding ID must be a string.");if(this.constructor.active.find((e=>e.id===t)))throw new Error(`A key listener with the ${t} ID already exists.`);this.id=t;for(const t in e)this[t]=e[t];if(!this.key)throw new Error("No input keys!");if("string"==typeof this.key&&(this.key=this.key.split(" ")),!Array.isArray(this.key))throw new Error("Improper key type, must be either a string or an array!");if("string"==typeof this.special&&(this.special=this.special.split(" ")),null!=this.special&&!Array.isArray(this.special))throw new Error("Improper special key, must be either a string or an array!");if(this.special?.some((t=>!["ctrl","alt","shift"].includes(t))))throw new Error("Special keys can only be: ctrl, shift or alt.");if(null!=this.condition&&"function"!=typeof this.condition)throw new Error("Improper condition type, must be a function.");if("function"!=typeof this.callback)throw new Error("Improper callback type, must be a function.");this.active??=!0,this.default={key:this.key,special:this.special},this.setDisplay(),this.constructor.active.push(this)}invoke(t){this.key.find((e=>e===t.key||e===t.code))&&(this.special&&!this.special.every((e=>t[e+"Key"]))||this.condition&&!this.condition.call(this,t)||(this.callback.call(this,t),this.once&&this.delete()))}setKey(t,e){this.special=["ctrl","alt","shift"].filter((e=>t[e+"Key"])),e&&this.special.pushUnique(e),this.key=[t.key],this.setDisplay()}reset(){this.key=this.default.key,this.special=this.default.special,this.setDisplay()}setDisplay(){let t="";return this.special?.length&&(t+=this.special.join(" + ")+" + "),t+=this.key.join(" / "),this.displayVal=t}createInput(){return $(`<input id='${this.id}' class='keyInput' readonly>`).val(this.displayVal).on("keydown",(t=>{t.preventDefault(),t.stopPropagation(),this.setKey(t),$inp.val(this.displayVal)}))}createInputContext(){const t=$(`<label for='${this.id}' class='keyLabel'>`).append(`<span class='keyName'>${this.name??this.id} : </span>`);return this.desc&&t.append(`<span class='keyDesc'>${this.desc}</span>`),this.createInput().appendTo(t),$("<button class='keyReset'>Reset to default</button>").attr({"aria-label":"Reset to default value",role:"button"}).on("click",(t=>{this.reset(),$inp.val(this.displayVal)})).appendTo(t),t}delete(){const t=this.constructor.active,e=t.findIndex((t=>t===this));t.splice(e,1)}disable(){return this.active=!1}toggle(){return this.active=!this.active}enable(){return this.active=!0}static active=[];static run(t){this.active.filter((t=>t.active)).forEach((e=>e.invoke(t)))}static add(t,e){return new this(t,e)}static get(t){return this.active.find((e=>e.id===t))??new Error(`No listener found for the ${t} id.`)}static remove(t){this.get(t).delete()}static createInputPanel(){const t=$("<ul class='keyInputPanel' style='display:grid'>");return this.active.length?this.active.forEach((e=>t.append(e.createInput()))):t.append("<span>No active key bindings.</span>"),t}},$(document).on("keydown.KeyControlAPI",(t=>KeyControl.run(t)));

/* KeyControl macros for the Sugarcube story format */

Macro.add("bindkey",{tags:["condition","special","desc"],handler(){if(!KeyControl)return this.error("This macro cannot be used without the KeyControl API.");if(this.args.length<2)return this.error("Macro requires at least two arguments: an id and a input key.");let[t,e]=this.args,r={};"object"!=typeof e||Array.isArray(e)||(r=e),r.once??=this.args.includes("once"),r.key??=e,r.callback??=t=>$.wiki(this.payload[0].contents.trim());const s=this.payload.find((t=>"condition"===t.name));s&&(r.condition??=t=>Scripting.evalTwineScript(s.args[0]??s.contents.trim()));const n=this.payload.find((t=>"desc"===t.name));n&&(r.desc??=n.contents,n.args[0]&&(r.name??=n.args[0]));const i=this.payload.find((t=>"special"===t.name));i&&(r.special??=i.args.flat().map((t=>t.trim().toLowerCase()))),new KeyControl(t,r)}}),Macro.add(["keysettings","keyinput"],{handler(){if(!KeyControl)return this.error("This macro cannot be used without the KeyControl API.");if("keysettings"===this.name)return $(this.output).append(KeyControl.createInputPanel());if(!this.args.length)return this.error("No supplied ID!");const t=KeyControl.get(this.args[0]);$(this.output).append(t[this.args[1]?"createInput":"createInputContext"]())}}),Macro.add("keyedit",{handler(){if(!KeyControl)return this.error("This macro cannot be used without the KeyControl API.");if(this.args.length<2)return this.error("Macro requires at least two arguments: a command and a listener id.");if("string"!=typeof this.args[0])return this.error("Command argument must be a string!");const t=this.args[0].trim().toLowerCase(),e=[];if(!["toggle","disable","enable","delete","reset"].includes(t))return this.error(`Command not recognized, reading: ${t}`);this.args.slice(1).forEach((t=>{if(Array.isArray(t))e.push(...t);else{if("string"!=typeof t)return this.error("IDs must be either strings or arrays of strings!");e.push(t)}})),e.forEach((e=>KeyControl.get(e)[t]()))}});

/* End of the KeyControl package */