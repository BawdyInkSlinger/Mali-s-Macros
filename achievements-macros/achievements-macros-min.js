/* Mali's achievements API and macros for Sugarcube */

(()=>{let e;try{e=createSlug}catch{e=Util.slugify}window.Achievement=class t{constructor(i,s){this.id=e(i),Object.assign(this,{name:{locked:"???",unlocked:i},view:{unlocked:"Achievement unlocked.",locked:"Achievement locked."}},s),this.message||="Achievement unlocked : "+this.name.unlocked,t.definitions[this.id]=this}lock(){t.state[this.id]=!1,t.commit()}unlock(e=!0){t.state[this.id]||(t.state[this.id]=!0,t.commit(),e&&this.notify())}display(){const e=!t.state[this.id];return $("<div>").attr({class:`achievement ${this.id} ${e?"locked":""} ${this.class||""}`,id:"achiev-"+this.id}).append(`<span class='achiev-name'>${e?this.name.locked:this.name.unlocked}</span>`).wiki(`<span class='achiev-inner'>${e?this.view.locked:this.view.unlocked}</span>`)}notify(){$("<span>").attr({class:`achiev-notif ${this.id} ${this.class||""}`}).wiki(this.message).on("animationend",(function(){this.remove()})).appendTo(t.notifBox)}static memID="achievements-API";static definitions={};static state=recall(this.memID,{});static each(e){for(const i in this.definitions){const s=this.definitions[i],a=this.state[i];e.call(t,s,a)}}static get(t){return this.definitions[e(t)]}static commit(){memorize(this.memID,this.state)}static clearAll(){this.state={},this.commit()}static unlockAll(){this.each((e=>e.unlock()))}static displayAll(e){const t=$("<div>").addClass("achiev-view-inner");return this.each((e=>t.append(e.display()))),t.children().length||t.append("...there are no defined achievements for this game..."),e?(Dialog.setup("Achievements"),Dialog.append(t).open()):$("<div>").addClass("achievements-view").append("<h2>Achievements</h2>",t)}static notifBox=$("<div>").attr({id:"notification-container"}).appendTo("body")},Macro.add(["new-achievement","new-achiev"],{tags:["locked","message"],handler(){const e={};this.payload.forEach((t=>{e[t.name]={args:t.args,contents:t.contents}}));const t={name:{unlocked:this.args[1]||this.args[0],locked:e.locked?.args[0]||"???"},class:this.args[2],view:{unlocked:this.payload[0].contents||"Achievement unlocked.",locked:e.locked?.contents||"Achievement locked."},message:e.message?.contents};new Achievement(this.args[0],t)}}),Macro.add(["achievement","achiev"],{handler(){let[t,i="display"]=this.args,s=Achievement.get(e(t));if(!s)return this.error(`No achievement found for id "${t}", make sure it is defined in StoryInit.`);switch(i=i.toLowerCase(),i){case"display":return s.display().appendTo(this.output);case"unlock":case"lock":return s[i]();default:return this.error(`"${i}" is not a valid command.`)}}}),Macro.add("achievements-display",{handler(){if("dialog"===this.args[0])return Achievement.displayAll(!0);Achievement.displayAll().appendTo(this.output)}}),Save.onSave.add(((e,t)=>{(e.hasOwnProperty("type")?"disk"===e.type:"disk"===t.type)&&(e.metadata??={},e.metadata.achievements=Achievement.state)})),Save.onLoad.add((e=>{const t=e.metadata?.achievements;if(t){for(const e in t)t[e]&&(Achievement.state[e]=t[e]);Achievement.commit()}}))})();