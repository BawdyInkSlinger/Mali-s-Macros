/* Mali's settings macros */

(()=>{const t=!$("tw-storydata").attr("format-version").startsWith("2.36"),e=[];$(":root").css({"--toggleOn":t?"'\\f205'":"'\\00a0\\00a0\\e831'","--toggleOff":t?"'\\f204'":"'\\00a0\\00a0\\e830'","--scFont":t?"sc-icons":"tme-fa-icons"}),Macro.add(["addToggle","addList","addRange","addValue"],{tags:["label","desc","onInit","onChange","onAny","list","range"],skipArgs:["list"],handler(){if(State.length)return this.error(`<<${this.name}>> should only be used in StoryInit or init-tagged passages.`);if(!Setting.addValue&&"addValue"===this.name)return this.error('The "value" type setting is only available in 2.37.0 and up versions of SugarCube.');const t=this.args[0],n=this.name.slice(3).toLowerCase();if(!t||"string"!=typeof t)return this.error(`Improper setting name, reading "${t}".`);const a={label:`Setting : ${t} ${n}.`};this.payload.forEach((t=>{switch(t.name){case"onAny":case"onInit":case"onChange":function e(){const e=State.temporary.this;State.temporary.this=this,$.wiki(t.contents),State.temporary.this=e}return void("onAny"===t.name?a.onChange=a.onInit=e:a[t.name]=e);case"list":if("list"!==n)return this.error(`<<${t.name}>> tag is only supported on list settings.`);let s;try{s=Scripting.evalJavaScript(t.args.full)}catch{return this.error("Invalid expression.")}return Array.isArray(s)?a.list=s:this.error(`<<${t.name}>> needs to yield an array!`);case"range":return"range"!==n?this.error(`<<${t.name}>> tag is only supported on range settings.`):[a.min=0,a.max=100,a.step=1]=t.args;default:a[t.name]=t.args[0]||t.contents}})),this.args.length>1&&(a.default=this.args[1]),Setting[this.name](t,a),e.push(t)}}),$(document).one(":storyready",(()=>{e.forEach((t=>{const e=Setting.get(t),n=settings[t]??e.default;settings[t]=n,e.onInit?.call(Object.assign({value:n},e))}))}));const n=(t,e)=>{let n;const a=n=>{e.value=settings[t]=n,e.onChange?.call(e),Setting.save()};switch(e.type){case 1:n=$("<button>").attr({type:"button",role:"button",class:settings[t]?"enabled":""}).text(settings[t]?"On":"Off"),n.ariaClick((()=>{a(!settings[t]),n.text(settings[t]?"On":"Off").toggleClass("enabled")}));break;case 2:n=$("<select tabindex=0>").on("change",(function(){a(e.list[this.value])})),e.list.forEach(((e,a)=>n.append(`<option value=${a} ${settings[t]===e?"selected":""}>${e}</option>`)));break;case 3:n=$("<input>").attr({type:"range",value:settings[t],min:e.min,max:e.max,step:e.step}).on("change",(function(){a(Number(this.value))}));break;case 4:n=$("<input>").attr({type:"text",placeholder:String(settings[t])}).on("change",(function(){let t;try{t=State.getVar(`(${this.value})`)}catch{t=this.value}a(t)}))}return n.attr("id","setting-control-"+t)},a=(t,e)=>{const a=$("<div>").attr({class:"setting-body",id:"setting-body-"+t});return $("<label>").attr({id:"setting-label-"+t,for:"setting-control-"+t}).wiki(e.label??`Setting : ${t} value.`).appendTo(a),a.append(n(t,e)),e.desc&&a.append(`<p class='setting-desc'>${e.desc}</p>`),a},s=(...t)=>{const e=$("<div>").addClass("macro-setting");return t.length||(t=!1),Setting.forEach((n=>{const s=n.name;if(t&&t.includes(s))return e.append(a(s,clone(n)));t||4===n.type||e.append(a(s,clone(n)))})),e};Macro.add("setting",{handler(){s(...this.args).appendTo(this.output)}}),setup.printSetting=s})();